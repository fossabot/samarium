name: CTest
on: [push]
jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.4.0.2170
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: List files in the repository
        run: |
          ls -AlhR ${{ github.workspace }}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.x'
      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main
      - name: Install other deps
        run: sudo apt-get update && sudo apt-get install valgrind libtbb-dev
      - name: Check Tool Versions
        run: |
          conan    --version
          cmake    --version
          c++      --version
          valgrind --version
          find     --version

      - name: Setup Build Environment
        run: mkdir -p build
      # - name: Cache Conan dependencies
      #   id: cache-conan-packages
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.conan/data
      #     key: conan-packages-${{ hashFiles('conanfile.txt') }}

      - name: Install Conan dependencies
        # if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./build
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          export CONAN_SYSREQUIRES_MODE=enabled
          conan install .. --build=missing
      - name: CMake
        working-directory: ./build
        run: cmake ..
      - name: CMake Build
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }}  cmake --build build
      # - name: CTest
      #   working-directory: ./build
      #   run: ctest -vv
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
