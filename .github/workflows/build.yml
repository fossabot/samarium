name: CTest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 7 * * *' # run at 7am everyday to keep fresh

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  config: 'Debug'
  CONAN_SYSREQUIRES_MODE: 'enabled'

jobs:
  Build:
    runs-on: ubuntu-latest

    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.x'

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install other deps
        run: sudo apt-get update && sudo apt-get install valgrind libtbb-dev libudev-dev
        
      - name: Check Tool Versions
        run: |
          conan    --version
          cmake    --version
          c++      --version
          valgrind --version

      - name: Setup Build Environment
        run: mkdir -p build
      - name: Cache Conan dependencies
        id: cache-conan-packages
        uses: actions/cache@v2
        with:
          path: ~/.conan/data
          key: conan-packages-${{ hashFiles('conanfile.txt') }}

      - name: Configure Conan
        if: steps.cache-conan-packages.cache-hit != 'true'
        working-directory: ./build
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan install ..
      - name: CMake
        run: cmake -B build
      - name: CMake Build
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }}  cmake --build build
      - name: CTest
        working-directory: ./build
        run: ctest -vv
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  analyze:
      name: Analyze
      runs-on: windows-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Install Conan
          id: conan
          uses: turtlebrowser/get-conan@main

        - name: Configure CMake
          run: cmake -B ${{ env.build }} -DCMAKE_BUILD_TYPE=${{ env.config }}

        # Build is not required unless generated source files are used
        # - name: Build CMake
        #   run: cmake --build ${{ env.build }} --config ${{ env.config }}

        - name: Run MSVC Code Analysis
          uses: microsoft/msvc-code-analysis-action@v0.1.0
          # Provide a unique ID to access the sarif output path
          id: run-analysis
          with:
            cmakeBuildDirectory: ${{ env.build }}
            buildConfiguration: ${{ env.config }}
            # Ruleset file that will determine what checks will be run
            ruleset: NativeRecommendedRules.ruleset
            # Paths to ignore analysis of CMake targets and includes
            # ignoredPaths: ${{ github.workspace }}/dependencies;${{ github.workspace }}/test

        # Upload SARIF file to GitHub Code Scanning Alerts
        - name: Upload SARIF to GitHub
          uses: github/codeql-action/upload-sarif@v1
          with:
            sarif_file: ${{ steps.run-analysis.outputs.sarif }}

        # Upload SARIF file as an Artifact to download and view
        - name: Upload SARIF as an Artifact
          uses: actions/upload-artifact@v2
          with:
            name: sarif-file
            path: ${{ steps.run-analysis.outputs.sarif }}
