name: GCC

on:
  push:
    branches: [main, gl]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 2 * * *" # run everyday to keep fresh

env:
  # Path to the CMake build directory.
  build: "${{ github.workspace }}/build"
  CONAN_SYSREQUIRES_MODE: "enabled"
  CONAN_USER_HOME: "${{ github.workspace }}/release/"

jobs:
  test:
    runs-on: ubuntu-20.04

    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Install GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.12

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Check Tool Versions
        run: |
          conan    --version
          cmake    --version
          g++      --version

      - name: Install system deps
        run: sudo apt-get install libudev-dev libgl-dev

      - name: Cache .conan directory
        id: cache-conan
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

      - name: Run Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan install . -b missing -if build -pr:b=default -o samarium:build_tests=True -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

      - name: CMake Configure
        run: |
          cmake --preset=ci

      - name: CMake Build
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build --preset=default

      - name: CTest
        run: ctest --preset=default

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  install:
    runs-on: ubuntu-20.04
    steps:
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.12

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install system deps
        run: sudo apt-get install libudev-dev

      - name: Check Tool Versions
        run: |
          conan    --version
          cmake    --version
          c++      --version

      - name: Cache .conan directory
        id: cache-conan
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

      - name: Git Clone
        run: git clone --depth 1 https://github.com/strangeQuark1041/samarium.git

      - name: Conan Install
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan install samarium -b missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

      - name: Conan Create
        run: conan create samarium -b missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

      - name: Run Example
        run: |
          mkdir -p example
          cd example
          git clone --depth 1 https://github.com/strangeQuark1041/samarium_example.git .
          cmake --preset=default
          cmake --build --preset=default
          ./build/bin/example
